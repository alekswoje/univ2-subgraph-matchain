// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ExpressFeeUpdated extends ethereum.Event {
  get params(): ExpressFeeUpdated__Params {
    return new ExpressFeeUpdated__Params(this);
  }
}

export class ExpressFeeUpdated__Params {
  _event: ExpressFeeUpdated;

  constructor(event: ExpressFeeUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FeeBPUpdated extends ethereum.Event {
  get params(): FeeBPUpdated__Params {
    return new FeeBPUpdated__Params(this);
  }
}

export class FeeBPUpdated__Params {
  _event: FeeBPUpdated;

  constructor(event: FeeBPUpdated) {
    this._event = event;
  }

  get oldFeeBP(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newFeeBP(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FeeRecipientUpdated extends ethereum.Event {
  get params(): FeeRecipientUpdated__Params {
    return new FeeRecipientUpdated__Params(this);
  }
}

export class FeeRecipientUpdated__Params {
  _event: FeeRecipientUpdated;

  constructor(event: FeeRecipientUpdated) {
    this._event = event;
  }

  get oldFeeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newFeeRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FlipAccepted extends ethereum.Event {
  get params(): FlipAccepted__Params {
    return new FlipAccepted__Params(this);
  }
}

export class FlipAccepted__Params {
  _event: FlipAccepted;

  constructor(event: FlipAccepted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get acceptor(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FlipCancelled extends ethereum.Event {
  get params(): FlipCancelled__Params {
    return new FlipCancelled__Params(this);
  }
}

export class FlipCancelled__Params {
  _event: FlipCancelled;

  constructor(event: FlipCancelled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FlipCreated extends ethereum.Event {
  get params(): FlipCreated__Params {
    return new FlipCreated__Params(this);
  }
}

export class FlipCreated__Params {
  _event: FlipCreated;

  constructor(event: FlipCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class FlipResolved extends ethereum.Event {
  get params(): FlipResolved__Params {
    return new FlipResolved__Params(this);
  }
}

export class FlipResolved__Params {
  _event: FlipResolved;

  constructor(event: FlipResolved) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get payout(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PendingWithdrawal extends ethereum.Event {
  get params(): PendingWithdrawal__Params {
    return new PendingWithdrawal__Params(this);
  }
}

export class PendingWithdrawal__Params {
  _event: PendingWithdrawal;

  constructor(event: PendingWithdrawal) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SessionDeposit extends ethereum.Event {
  get params(): SessionDeposit__Params {
    return new SessionDeposit__Params(this);
  }
}

export class SessionDeposit__Params {
  _event: SessionDeposit;

  constructor(event: SessionDeposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SessionFeePaid extends ethereum.Event {
  get params(): SessionFeePaid__Params {
    return new SessionFeePaid__Params(this);
  }
}

export class SessionFeePaid__Params {
  _event: SessionFeePaid;

  constructor(event: SessionFeePaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenApproved extends ethereum.Event {
  get params(): TokenApproved__Params {
    return new TokenApproved__Params(this);
  }
}

export class TokenApproved__Params {
  _event: TokenApproved;

  constructor(event: TokenApproved) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CoinflipGame__flipsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: boolean;
  value5: BigInt;
  value6: boolean;
  value7: Address;
  value8: boolean;
  value9: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: boolean,
    value5: BigInt,
    value6: boolean,
    value7: Address,
    value8: boolean,
    value9: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getAcceptor(): Address {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getWinner(): Address {
    return this.value3;
  }

  getResolved(): boolean {
    return this.value4;
  }

  getCreatedAt(): BigInt {
    return this.value5;
  }

  getCancelled(): boolean {
    return this.value6;
  }

  getTokenAddress(): Address {
    return this.value7;
  }

  getCreatorUsedSession(): boolean {
    return this.value8;
  }

  getAcceptorUsedSession(): boolean {
    return this.value9;
  }
}

export class CoinflipGame__getFlipResultValue0Struct extends ethereum.Tuple {
  get creator(): Address {
    return this[0].toAddress();
  }

  get acceptor(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get winner(): Address {
    return this[3].toAddress();
  }

  get resolved(): boolean {
    return this[4].toBoolean();
  }

  get createdAt(): BigInt {
    return this[5].toBigInt();
  }

  get cancelled(): boolean {
    return this[6].toBoolean();
  }

  get tokenAddress(): Address {
    return this[7].toAddress();
  }

  get creatorUsedSession(): boolean {
    return this[8].toBoolean();
  }

  get acceptorUsedSession(): boolean {
    return this[9].toBoolean();
  }
}

export class CoinflipGame__getTokensInfoResultValue0Struct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get minStake(): BigInt {
    return this[1].toBigInt();
  }

  get expressFee(): BigInt {
    return this[2].toBigInt();
  }
}

export class CoinflipGame extends ethereum.SmartContract {
  static bind(address: Address): CoinflipGame {
    return new CoinflipGame("CoinflipGame", address);
  }

  MAX_ACTIVE_FLIPS(): BigInt {
    let result = super.call(
      "MAX_ACTIVE_FLIPS",
      "MAX_ACTIVE_FLIPS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_ACTIVE_FLIPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_ACTIVE_FLIPS",
      "MAX_ACTIVE_FLIPS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_NATIVE_STAKE(): BigInt {
    let result = super.call(
      "MIN_NATIVE_STAKE",
      "MIN_NATIVE_STAKE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_NATIVE_STAKE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_NATIVE_STAKE",
      "MIN_NATIVE_STAKE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  activeFlipCount(): BigInt {
    let result = super.call(
      "activeFlipCount",
      "activeFlipCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_activeFlipCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeFlipCount",
      "activeFlipCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activeFlipsPerToken(param0: Address): BigInt {
    let result = super.call(
      "activeFlipsPerToken",
      "activeFlipsPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_activeFlipsPerToken(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeFlipsPerToken",
      "activeFlipsPerToken(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvedTokens(param0: Address): boolean {
    let result = super.call(
      "approvedTokens",
      "approvedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_approvedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedTokens",
      "approvedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approvedTokensList(param0: BigInt): Address {
    let result = super.call(
      "approvedTokensList",
      "approvedTokensList(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_approvedTokensList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "approvedTokensList",
      "approvedTokensList(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  expressFee(param0: Address): BigInt {
    let result = super.call("expressFee", "expressFee(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_expressFee(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("expressFee", "expressFee(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeBP(): BigInt {
    let result = super.call("feeBP", "feeBP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeBP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeBP", "feeBP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  firstActiveFlipId(): BigInt {
    let result = super.call(
      "firstActiveFlipId",
      "firstActiveFlipId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_firstActiveFlipId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstActiveFlipId",
      "firstActiveFlipId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  flips(param0: BigInt): CoinflipGame__flipsResult {
    let result = super.call(
      "flips",
      "flips(uint256):(address,address,uint256,address,bool,uint256,bool,address,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new CoinflipGame__flipsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toAddress(),
      result[8].toBoolean(),
      result[9].toBoolean(),
    );
  }

  try_flips(param0: BigInt): ethereum.CallResult<CoinflipGame__flipsResult> {
    let result = super.tryCall(
      "flips",
      "flips(uint256):(address,address,uint256,address,bool,uint256,bool,address,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoinflipGame__flipsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toAddress(),
        value[8].toBoolean(),
        value[9].toBoolean(),
      ),
    );
  }

  getActiveFlipIds(): Array<BigInt> {
    let result = super.call(
      "getActiveFlipIds",
      "getActiveFlipIds():(uint256[])",
      [],
    );

    return result[0].toBigIntArray();
  }

  try_getActiveFlipIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getActiveFlipIds",
      "getActiveFlipIds():(uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getActiveFlipIdsPaginated(startId: BigInt, limit: BigInt): Array<BigInt> {
    let result = super.call(
      "getActiveFlipIdsPaginated",
      "getActiveFlipIdsPaginated(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startId),
        ethereum.Value.fromUnsignedBigInt(limit),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getActiveFlipIdsPaginated(
    startId: BigInt,
    limit: BigInt,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getActiveFlipIdsPaginated",
      "getActiveFlipIdsPaginated(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startId),
        ethereum.Value.fromUnsignedBigInt(limit),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getFlip(flipId: BigInt): CoinflipGame__getFlipResultValue0Struct {
    let result = super.call(
      "getFlip",
      "getFlip(uint256):((address,address,uint256,address,bool,uint256,bool,address,bool,bool))",
      [ethereum.Value.fromUnsignedBigInt(flipId)],
    );

    return changetype<CoinflipGame__getFlipResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getFlip(
    flipId: BigInt,
  ): ethereum.CallResult<CoinflipGame__getFlipResultValue0Struct> {
    let result = super.tryCall(
      "getFlip",
      "getFlip(uint256):((address,address,uint256,address,bool,uint256,bool,address,bool,bool))",
      [ethereum.Value.fromUnsignedBigInt(flipId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CoinflipGame__getFlipResultValue0Struct>(value[0].toTuple()),
    );
  }

  getTokensInfo(): Array<CoinflipGame__getTokensInfoResultValue0Struct> {
    let result = super.call(
      "getTokensInfo",
      "getTokensInfo():((address,uint256,uint256)[])",
      [],
    );

    return result[0].toTupleArray<CoinflipGame__getTokensInfoResultValue0Struct>();
  }

  try_getTokensInfo(): ethereum.CallResult<
    Array<CoinflipGame__getTokensInfoResultValue0Struct>
  > {
    let result = super.tryCall(
      "getTokensInfo",
      "getTokensInfo():((address,uint256,uint256)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CoinflipGame__getTokensInfoResultValue0Struct>(),
    );
  }

  isTokenApproved(_tokenAddress: Address): boolean {
    let result = super.call(
      "isTokenApproved",
      "isTokenApproved(address):(bool)",
      [ethereum.Value.fromAddress(_tokenAddress)],
    );

    return result[0].toBoolean();
  }

  try_isTokenApproved(_tokenAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTokenApproved",
      "isTokenApproved(address):(bool)",
      [ethereum.Value.fromAddress(_tokenAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastActiveFlipId(): BigInt {
    let result = super.call(
      "lastActiveFlipId",
      "lastActiveFlipId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastActiveFlipId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastActiveFlipId",
      "lastActiveFlipId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minERC20Stake(param0: Address): BigInt {
    let result = super.call(
      "minERC20Stake",
      "minERC20Stake(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_minERC20Stake(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minERC20Stake",
      "minERC20Stake(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextActiveFlipId(param0: BigInt): BigInt {
    let result = super.call(
      "nextActiveFlipId",
      "nextActiveFlipId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_nextActiveFlipId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextActiveFlipId",
      "nextActiveFlipId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextFlipId(): BigInt {
    let result = super.call("nextFlipId", "nextFlipId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextFlipId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextFlipId", "nextFlipId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingWithdrawals(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "pendingWithdrawals",
      "pendingWithdrawals(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_pendingWithdrawals(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingWithdrawals",
      "pendingWithdrawals(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prevActiveFlipId(param0: BigInt): BigInt {
    let result = super.call(
      "prevActiveFlipId",
      "prevActiveFlipId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_prevActiveFlipId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prevActiveFlipId",
      "prevActiveFlipId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  relayers(param0: Address): boolean {
    let result = super.call("relayers", "relayers(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_relayers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("relayers", "relayers(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sessionBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "sessionBalances",
      "sessionBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_sessionBalances(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sessionBalances",
      "sessionBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AcceptFlipCall extends ethereum.Call {
  get inputs(): AcceptFlipCall__Inputs {
    return new AcceptFlipCall__Inputs(this);
  }

  get outputs(): AcceptFlipCall__Outputs {
    return new AcceptFlipCall__Outputs(this);
  }
}

export class AcceptFlipCall__Inputs {
  _call: AcceptFlipCall;

  constructor(call: AcceptFlipCall) {
    this._call = call;
  }

  get flipId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptFlipCall__Outputs {
  _call: AcceptFlipCall;

  constructor(call: AcceptFlipCall) {
    this._call = call;
  }
}

export class AcceptFlipFromSessionCall extends ethereum.Call {
  get inputs(): AcceptFlipFromSessionCall__Inputs {
    return new AcceptFlipFromSessionCall__Inputs(this);
  }

  get outputs(): AcceptFlipFromSessionCall__Outputs {
    return new AcceptFlipFromSessionCall__Outputs(this);
  }
}

export class AcceptFlipFromSessionCall__Inputs {
  _call: AcceptFlipFromSessionCall;

  constructor(call: AcceptFlipFromSessionCall) {
    this._call = call;
  }

  get flipId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AcceptFlipFromSessionCall__Outputs {
  _call: AcceptFlipFromSessionCall;

  constructor(call: AcceptFlipFromSessionCall) {
    this._call = call;
  }
}

export class AddApprovedTokenCall extends ethereum.Call {
  get inputs(): AddApprovedTokenCall__Inputs {
    return new AddApprovedTokenCall__Inputs(this);
  }

  get outputs(): AddApprovedTokenCall__Outputs {
    return new AddApprovedTokenCall__Outputs(this);
  }
}

export class AddApprovedTokenCall__Inputs {
  _call: AddApprovedTokenCall;

  constructor(call: AddApprovedTokenCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minStake(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _expressFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddApprovedTokenCall__Outputs {
  _call: AddApprovedTokenCall;

  constructor(call: AddApprovedTokenCall) {
    this._call = call;
  }
}

export class CancelFlipCall extends ethereum.Call {
  get inputs(): CancelFlipCall__Inputs {
    return new CancelFlipCall__Inputs(this);
  }

  get outputs(): CancelFlipCall__Outputs {
    return new CancelFlipCall__Outputs(this);
  }
}

export class CancelFlipCall__Inputs {
  _call: CancelFlipCall;

  constructor(call: CancelFlipCall) {
    this._call = call;
  }

  get flipId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelFlipCall__Outputs {
  _call: CancelFlipCall;

  constructor(call: CancelFlipCall) {
    this._call = call;
  }
}

export class CancelFlipFromSessionCall extends ethereum.Call {
  get inputs(): CancelFlipFromSessionCall__Inputs {
    return new CancelFlipFromSessionCall__Inputs(this);
  }

  get outputs(): CancelFlipFromSessionCall__Outputs {
    return new CancelFlipFromSessionCall__Outputs(this);
  }
}

export class CancelFlipFromSessionCall__Inputs {
  _call: CancelFlipFromSessionCall;

  constructor(call: CancelFlipFromSessionCall) {
    this._call = call;
  }

  get flipId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CancelFlipFromSessionCall__Outputs {
  _call: CancelFlipFromSessionCall;

  constructor(call: CancelFlipFromSessionCall) {
    this._call = call;
  }
}

export class CreateFlipCall extends ethereum.Call {
  get inputs(): CreateFlipCall__Inputs {
    return new CreateFlipCall__Inputs(this);
  }

  get outputs(): CreateFlipCall__Outputs {
    return new CreateFlipCall__Outputs(this);
  }
}

export class CreateFlipCall__Inputs {
  _call: CreateFlipCall;

  constructor(call: CreateFlipCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateFlipCall__Outputs {
  _call: CreateFlipCall;

  constructor(call: CreateFlipCall) {
    this._call = call;
  }
}

export class CreateFlipFromSessionCall extends ethereum.Call {
  get inputs(): CreateFlipFromSessionCall__Inputs {
    return new CreateFlipFromSessionCall__Inputs(this);
  }

  get outputs(): CreateFlipFromSessionCall__Outputs {
    return new CreateFlipFromSessionCall__Outputs(this);
  }
}

export class CreateFlipFromSessionCall__Inputs {
  _call: CreateFlipFromSessionCall;

  constructor(call: CreateFlipFromSessionCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateFlipFromSessionCall__Outputs {
  _call: CreateFlipFromSessionCall;

  constructor(call: CreateFlipFromSessionCall) {
    this._call = call;
  }
}

export class DepositToSessionCall extends ethereum.Call {
  get inputs(): DepositToSessionCall__Inputs {
    return new DepositToSessionCall__Inputs(this);
  }

  get outputs(): DepositToSessionCall__Outputs {
    return new DepositToSessionCall__Outputs(this);
  }
}

export class DepositToSessionCall__Inputs {
  _call: DepositToSessionCall;

  constructor(call: DepositToSessionCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositToSessionCall__Outputs {
  _call: DepositToSessionCall;

  constructor(call: DepositToSessionCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveApprovedTokenCall extends ethereum.Call {
  get inputs(): RemoveApprovedTokenCall__Inputs {
    return new RemoveApprovedTokenCall__Inputs(this);
  }

  get outputs(): RemoveApprovedTokenCall__Outputs {
    return new RemoveApprovedTokenCall__Outputs(this);
  }
}

export class RemoveApprovedTokenCall__Inputs {
  _call: RemoveApprovedTokenCall;

  constructor(call: RemoveApprovedTokenCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveApprovedTokenCall__Outputs {
  _call: RemoveApprovedTokenCall;

  constructor(call: RemoveApprovedTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetExpressFeeCall extends ethereum.Call {
  get inputs(): SetExpressFeeCall__Inputs {
    return new SetExpressFeeCall__Inputs(this);
  }

  get outputs(): SetExpressFeeCall__Outputs {
    return new SetExpressFeeCall__Outputs(this);
  }
}

export class SetExpressFeeCall__Inputs {
  _call: SetExpressFeeCall;

  constructor(call: SetExpressFeeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetExpressFeeCall__Outputs {
  _call: SetExpressFeeCall;

  constructor(call: SetExpressFeeCall) {
    this._call = call;
  }
}

export class SetFeeBPCall extends ethereum.Call {
  get inputs(): SetFeeBPCall__Inputs {
    return new SetFeeBPCall__Inputs(this);
  }

  get outputs(): SetFeeBPCall__Outputs {
    return new SetFeeBPCall__Outputs(this);
  }
}

export class SetFeeBPCall__Inputs {
  _call: SetFeeBPCall;

  constructor(call: SetFeeBPCall) {
    this._call = call;
  }

  get _feeBP(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeBPCall__Outputs {
  _call: SetFeeBPCall;

  constructor(call: SetFeeBPCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetRelayerCall extends ethereum.Call {
  get inputs(): SetRelayerCall__Inputs {
    return new SetRelayerCall__Inputs(this);
  }

  get outputs(): SetRelayerCall__Outputs {
    return new SetRelayerCall__Outputs(this);
  }
}

export class SetRelayerCall__Inputs {
  _call: SetRelayerCall;

  constructor(call: SetRelayerCall) {
    this._call = call;
  }

  get _relayer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _allowed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetRelayerCall__Outputs {
  _call: SetRelayerCall;

  constructor(call: SetRelayerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawSessionBalanceCall extends ethereum.Call {
  get inputs(): WithdrawSessionBalanceCall__Inputs {
    return new WithdrawSessionBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawSessionBalanceCall__Outputs {
    return new WithdrawSessionBalanceCall__Outputs(this);
  }
}

export class WithdrawSessionBalanceCall__Inputs {
  _call: WithdrawSessionBalanceCall;

  constructor(call: WithdrawSessionBalanceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawSessionBalanceCall__Outputs {
  _call: WithdrawSessionBalanceCall;

  constructor(call: WithdrawSessionBalanceCall) {
    this._call = call;
  }
}
