# The Player entity tracks all-time stats for a single address.
type Player @entity {
  # Player's wallet address
  id: ID!
  # Total number of flips created or accepted by this player
  totalFlips: BigInt!
  # Total number of flips won
  wins: BigInt!
  # Total number of flips lost
  losses: BigInt!
  # Aggregated volume per token
  tokenBalances: [PlayerTokenBalance!]! @derivedFrom(field: "player")
}

# Tracks a player's total volume for a specific token.
type PlayerTokenBalance @entity {
  # Composite ID: {playerAddress}-{tokenAddress}
  id: ID!
  # Link to the player
  player: Player!
  # Link to the token
  token: Token!
  # Total volume of this token wagered by the player
  totalVolume: BigInt!
}

# The Flip entity stores details for a single flip event.
type Flip @entity {
  # The flip's unique ID from the contract
  id: ID!
  # The player who created the flip
  creator: Player!
  # The player who accepted the flip
  acceptor: Player
  # Link to the token being flipped
  token: Token!
  # The raw amount of tokens being flipped (in smallest unit, e.g., wei)
  amount: BigInt!
  # The player who won the flip
  winner: Player
  # The timestamp when the flip was created
  createdAt: BigInt!
  # The timestamp when the flip was resolved
  resolvedAt: BigInt
  # The transaction hash where the flip was created
  createdTx: Bytes!
  # The transaction hash where the flip was resolved
  resolvedTx: Bytes
}

# A single entity to track global platform statistics.
type PlatformData @entity {
  # A constant ID, e.g., "1", to ensure it's a singleton
  id: ID!
  # Total number of flips on the platform
  totalFlips: BigInt!
  # Total unique players
  uniquePlayers: BigInt!
}

# Stores information about a token.
type Token @entity {
  # Token address
  id: ID!
  # Token symbol, e.g., "BNB"
  symbol: String!
  # Token decimals
  decimals: Int!
  # Total volume wagered across the platform for this token
  totalVolume: BigInt!
}